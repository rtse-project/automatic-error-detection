{
  "start" : 102,
  "end" : 1172,
  "startToken" : null,
  "endToken" : null,
  "code" : "public class JavaTimerExampleTask extends TimerTask {\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"The execution of task started at: \" + new Date());\n\t\t// put task implementation here\n\n\t\t// put a sleep\n\t\ttry {\n\t\t\tThread.sleep(4000);\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"The execution of task finished at: \" + new Date());\n\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tTimerTask task = new JavaTimerExampleTask();\n\n\t\t// true means : associated thread should run as a daemon\n\t\tTimer timer = new Timer(true);\n\t\ttimer.getClass().getSimpleName().equals(\"test\");\n\n\t\t// Subsequent executions take place at approximately regular intervals,\n\t\t// separated by the specified period.\n\t\ttimer.schedule(task, 0, 5000);\n\t\tSystem.out.println(\"The schedular has started\");\n\n\t\ttry {\n\t\t\t// Putting a sleep of 10000 ms so that the task can run twice as it\n\t\t\t// is scheduled to run every 500ms\n\t\t\tThread.sleep(10000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}",
  "line" : 7,
  "packageName" : "com.jcg.example",
  "methods" : [ {
    "start" : 158,
    "end" : 525,
    "startToken" : null,
    "endToken" : null,
    "code" : "@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"The execution of task started at: \" + new Date());\n\t\t// put task implementation here\n\n\t\t// put a sleep\n\t\ttry {\n\t\t\tThread.sleep(4000);\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"The execution of task finished at: \" + new Date());\n\n\t}",
    "line" : 9,
    "name" : "run",
    "returnType" : "void",
    "parameters" : [ ],
    "exceptionsThrowed" : [ ],
    "stms" : [ {
      "start" : 191,
      "end" : 261,
      "startToken" : null,
      "endToken" : null,
      "code" : "System.out.println(\"The execution of task started at: \" + new Date());",
      "line" : 11,
      "expression" : {
        "start" : 191,
        "end" : 260,
        "startToken" : null,
        "endToken" : null,
        "code" : "System.out.println(\"The execution of task started at: \" + new Date())",
        "line" : 11,
        "methodName" : "println",
        "exprCallee" : {
          "start" : 191,
          "end" : 201,
          "startToken" : null,
          "endToken" : null,
          "code" : "System.out",
          "line" : 11,
          "timeCritical" : false
        },
        "parameters" : [ {
          "start" : 210,
          "end" : 259,
          "startToken" : null,
          "endToken" : null,
          "code" : "\"The execution of task started at: \" + new Date()",
          "line" : 11,
          "left" : {
            "start" : 210,
            "end" : 246,
            "startToken" : null,
            "endToken" : null,
            "code" : "\"The execution of task started at: \"",
            "line" : 11,
            "value" : "\"The execution of task started at: \"",
            "timeCritical" : false
          },
          "right" : {
            "start" : 249,
            "end" : 259,
            "startToken" : null,
            "endToken" : null,
            "code" : "new Date()",
            "line" : 11,
            "parameters" : [ ],
            "typeName" : "Date",
            "array" : false,
            "timeCritical" : false
          },
          "op" : "plus",
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 316,
      "end" : 447,
      "startToken" : null,
      "endToken" : null,
      "code" : "try {\n\t\t\tThread.sleep(4000);\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}",
      "line" : 15,
      "tryBranch" : {
        "start" : 320,
        "end" : 348,
        "startToken" : null,
        "endToken" : null,
        "code" : "{\n\t\t\tThread.sleep(4000);\n\t\t}",
        "line" : 15,
        "stms" : [ {
          "start" : 325,
          "end" : 344,
          "startToken" : null,
          "endToken" : null,
          "code" : "Thread.sleep(4000);",
          "line" : 16,
          "expression" : {
            "start" : 325,
            "end" : 343,
            "startToken" : null,
            "endToken" : null,
            "code" : "Thread.sleep(4000)",
            "line" : 16,
            "methodName" : "sleep",
            "exprCallee" : {
              "start" : 325,
              "end" : 331,
              "startToken" : null,
              "endToken" : null,
              "code" : "Thread",
              "line" : 16,
              "value" : "Thread",
              "timeCritical" : false
            },
            "parameters" : [ {
              "start" : 338,
              "end" : 342,
              "startToken" : null,
              "endToken" : null,
              "code" : "4000",
              "line" : 16,
              "value" : "4000",
              "timeCritical" : false
            } ],
            "timeCritical" : false
          },
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "catchBranch" : [ {
        "start" : 349,
        "end" : 447,
        "startToken" : null,
        "endToken" : null,
        "code" : "catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}",
        "line" : 17,
        "stms" : [ {
          "start" : 423,
          "end" : 443,
          "startToken" : null,
          "endToken" : null,
          "code" : "e.printStackTrace();",
          "line" : 19,
          "expression" : {
            "start" : 423,
            "end" : 442,
            "startToken" : null,
            "endToken" : null,
            "code" : "e.printStackTrace()",
            "line" : 19,
            "methodName" : "printStackTrace",
            "exprCallee" : {
              "start" : 423,
              "end" : 424,
              "startToken" : null,
              "endToken" : null,
              "code" : "e",
              "line" : 19,
              "value" : "e",
              "timeCritical" : false
            },
            "parameters" : [ ],
            "timeCritical" : false
          },
          "timeCritical" : false
        } ],
        "timeCritical" : false
      } ],
      "finallyBranch" : null,
      "timeCritical" : false
    }, {
      "start" : 450,
      "end" : 521,
      "startToken" : null,
      "endToken" : null,
      "code" : "System.out.println(\"The execution of task finished at: \" + new Date());",
      "line" : 21,
      "expression" : {
        "start" : 450,
        "end" : 520,
        "startToken" : null,
        "endToken" : null,
        "code" : "System.out.println(\"The execution of task finished at: \" + new Date())",
        "line" : 21,
        "methodName" : "println",
        "exprCallee" : {
          "start" : 450,
          "end" : 460,
          "startToken" : null,
          "endToken" : null,
          "code" : "System.out",
          "line" : 21,
          "timeCritical" : false
        },
        "parameters" : [ {
          "start" : 469,
          "end" : 519,
          "startToken" : null,
          "endToken" : null,
          "code" : "\"The execution of task finished at: \" + new Date()",
          "line" : 21,
          "left" : {
            "start" : 469,
            "end" : 506,
            "startToken" : null,
            "endToken" : null,
            "code" : "\"The execution of task finished at: \"",
            "line" : 21,
            "value" : "\"The execution of task finished at: \"",
            "timeCritical" : false
          },
          "right" : {
            "start" : 509,
            "end" : 519,
            "startToken" : null,
            "endToken" : null,
            "code" : "new Date()",
            "line" : 21,
            "parameters" : [ ],
            "typeName" : "Date",
            "array" : false,
            "timeCritical" : false
          },
          "op" : "plus",
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "timeCritical" : false
    } ],
    "syncronized" : false,
    "timeCritical" : false
  }, {
    "start" : 528,
    "end" : 1169,
    "startToken" : null,
    "endToken" : null,
    "code" : "public static void main(String[] args) {\n\n\t\tTimerTask task = new JavaTimerExampleTask();\n\n\t\t// true means : associated thread should run as a daemon\n\t\tTimer timer = new Timer(true);\n\t\ttimer.getClass().getSimpleName().equals(\"test\");\n\n\t\t// Subsequent executions take place at approximately regular intervals,\n\t\t// separated by the specified period.\n\t\ttimer.schedule(task, 0, 5000);\n\t\tSystem.out.println(\"The schedular has started\");\n\n\t\ttry {\n\t\t\t// Putting a sleep of 10000 ms so that the task can run twice as it\n\t\t\t// is scheduled to run every 500ms\n\t\t\tThread.sleep(10000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
    "line" : 25,
    "name" : "main",
    "returnType" : "void",
    "parameters" : [ {
      "start" : 552,
      "end" : 565,
      "startToken" : null,
      "endToken" : null,
      "code" : "String[] args",
      "line" : 25,
      "name" : "args",
      "type" : "String[]",
      "timeCritical" : false
    } ],
    "exceptionsThrowed" : [ ],
    "stms" : [ {
      "start" : 572,
      "end" : 616,
      "startToken" : null,
      "endToken" : null,
      "code" : "TimerTask task = new JavaTimerExampleTask();",
      "line" : 27,
      "expression" : {
        "start" : 572,
        "end" : 616,
        "startToken" : null,
        "endToken" : null,
        "code" : "TimerTask task = new JavaTimerExampleTask();",
        "line" : 27,
        "type" : "TimerTask",
        "name" : {
          "start" : 582,
          "end" : 586,
          "startToken" : null,
          "endToken" : null,
          "code" : "task",
          "line" : 27,
          "value" : "task",
          "timeCritical" : false
        },
        "expr" : {
          "start" : 589,
          "end" : 615,
          "startToken" : null,
          "endToken" : null,
          "code" : "new JavaTimerExampleTask()",
          "line" : 27,
          "parameters" : [ ],
          "typeName" : "JavaTimerExampleTask",
          "array" : false,
          "timeCritical" : false
        },
        "nameString" : "task",
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 679,
      "end" : 709,
      "startToken" : null,
      "endToken" : null,
      "code" : "Timer timer = new Timer(true);",
      "line" : 30,
      "expression" : {
        "start" : 679,
        "end" : 709,
        "startToken" : null,
        "endToken" : null,
        "code" : "Timer timer = new Timer(true);",
        "line" : 30,
        "type" : "Timer",
        "name" : {
          "start" : 685,
          "end" : 690,
          "startToken" : null,
          "endToken" : null,
          "code" : "timer",
          "line" : 30,
          "value" : "timer",
          "timeCritical" : false
        },
        "expr" : {
          "start" : 693,
          "end" : 708,
          "startToken" : null,
          "endToken" : null,
          "code" : "new Timer(true)",
          "line" : 30,
          "parameters" : [ {
            "start" : 703,
            "end" : 707,
            "startToken" : null,
            "endToken" : null,
            "code" : "true",
            "line" : 30,
            "value" : "true",
            "timeCritical" : false
          } ],
          "typeName" : "Timer",
          "array" : false,
          "timeCritical" : false
        },
        "nameString" : "timer",
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 712,
      "end" : 760,
      "startToken" : null,
      "endToken" : null,
      "code" : "timer.getClass().getSimpleName().equals(\"test\");",
      "line" : 31,
      "expression" : {
        "start" : 712,
        "end" : 759,
        "startToken" : null,
        "endToken" : null,
        "code" : "timer.getClass().getSimpleName().equals(\"test\")",
        "line" : 31,
        "methodName" : "equals",
        "exprCallee" : {
          "start" : 712,
          "end" : 744,
          "startToken" : null,
          "endToken" : null,
          "code" : "timer.getClass().getSimpleName()",
          "line" : 31,
          "methodName" : "getSimpleName",
          "exprCallee" : {
            "start" : 712,
            "end" : 728,
            "startToken" : null,
            "endToken" : null,
            "code" : "timer.getClass()",
            "line" : 31,
            "methodName" : "getClass",
            "exprCallee" : {
              "start" : 712,
              "end" : 717,
              "startToken" : null,
              "endToken" : null,
              "code" : "timer",
              "line" : 31,
              "value" : "timer",
              "timeCritical" : false
            },
            "parameters" : [ ],
            "timeCritical" : false
          },
          "parameters" : [ ],
          "timeCritical" : false
        },
        "parameters" : [ {
          "start" : 752,
          "end" : 758,
          "startToken" : null,
          "endToken" : null,
          "code" : "\"test\"",
          "line" : 31,
          "value" : "\"test\"",
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 878,
      "end" : 908,
      "startToken" : null,
      "endToken" : null,
      "code" : "timer.schedule(task, 0, 5000);",
      "line" : 35,
      "expression" : {
        "start" : 878,
        "end" : 907,
        "startToken" : null,
        "endToken" : null,
        "code" : "timer.schedule(task, 0, 5000)",
        "line" : 35,
        "methodName" : "schedule",
        "exprCallee" : {
          "start" : 878,
          "end" : 883,
          "startToken" : null,
          "endToken" : null,
          "code" : "timer",
          "line" : 35,
          "value" : "timer",
          "timeCritical" : false
        },
        "parameters" : [ {
          "start" : 893,
          "end" : 897,
          "startToken" : null,
          "endToken" : null,
          "code" : "task",
          "line" : 35,
          "value" : "task",
          "timeCritical" : false
        }, {
          "start" : 899,
          "end" : 900,
          "startToken" : null,
          "endToken" : null,
          "code" : "0",
          "line" : 35,
          "value" : "0",
          "timeCritical" : false
        }, {
          "start" : 902,
          "end" : 906,
          "startToken" : null,
          "endToken" : null,
          "code" : "5000",
          "line" : 35,
          "value" : "5000",
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 911,
      "end" : 959,
      "startToken" : null,
      "endToken" : null,
      "code" : "System.out.println(\"The schedular has started\");",
      "line" : 36,
      "expression" : {
        "start" : 911,
        "end" : 958,
        "startToken" : null,
        "endToken" : null,
        "code" : "System.out.println(\"The schedular has started\")",
        "line" : 36,
        "methodName" : "println",
        "exprCallee" : {
          "start" : 911,
          "end" : 921,
          "startToken" : null,
          "endToken" : null,
          "code" : "System.out",
          "line" : 36,
          "timeCritical" : false
        },
        "parameters" : [ {
          "start" : 930,
          "end" : 957,
          "startToken" : null,
          "endToken" : null,
          "code" : "\"The schedular has started\"",
          "line" : 36,
          "value" : "\"The schedular has started\"",
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "timeCritical" : false
    }, {
      "start" : 963,
      "end" : 1166,
      "startToken" : null,
      "endToken" : null,
      "code" : "try {\n\t\t\t// Putting a sleep of 10000 ms so that the task can run twice as it\n\t\t\t// is scheduled to run every 500ms\n\t\t\tThread.sleep(10000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}",
      "line" : 38,
      "tryBranch" : {
        "start" : 967,
        "end" : 1105,
        "startToken" : null,
        "endToken" : null,
        "code" : "{\n\t\t\t// Putting a sleep of 10000 ms so that the task can run twice as it\n\t\t\t// is scheduled to run every 500ms\n\t\t\tThread.sleep(10000);\n\t\t}",
        "line" : 38,
        "stms" : [ {
          "start" : 1081,
          "end" : 1101,
          "startToken" : null,
          "endToken" : null,
          "code" : "Thread.sleep(10000);",
          "line" : 41,
          "expression" : {
            "start" : 1081,
            "end" : 1100,
            "startToken" : null,
            "endToken" : null,
            "code" : "Thread.sleep(10000)",
            "line" : 41,
            "methodName" : "sleep",
            "exprCallee" : {
              "start" : 1081,
              "end" : 1087,
              "startToken" : null,
              "endToken" : null,
              "code" : "Thread",
              "line" : 41,
              "value" : "Thread",
              "timeCritical" : false
            },
            "parameters" : [ {
              "start" : 1094,
              "end" : 1099,
              "startToken" : null,
              "endToken" : null,
              "code" : "10000",
              "line" : 41,
              "value" : "10000",
              "timeCritical" : false
            } ],
            "timeCritical" : false
          },
          "timeCritical" : false
        } ],
        "timeCritical" : false
      },
      "catchBranch" : [ {
        "start" : 1106,
        "end" : 1166,
        "startToken" : null,
        "endToken" : null,
        "code" : "catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}",
        "line" : 42,
        "stms" : [ {
          "start" : 1142,
          "end" : 1162,
          "startToken" : null,
          "endToken" : null,
          "code" : "e.printStackTrace();",
          "line" : 43,
          "expression" : {
            "start" : 1142,
            "end" : 1161,
            "startToken" : null,
            "endToken" : null,
            "code" : "e.printStackTrace()",
            "line" : 43,
            "methodName" : "printStackTrace",
            "exprCallee" : {
              "start" : 1142,
              "end" : 1143,
              "startToken" : null,
              "endToken" : null,
              "code" : "e",
              "line" : 43,
              "value" : "e",
              "timeCritical" : false
            },
            "parameters" : [ ],
            "timeCritical" : false
          },
          "timeCritical" : false
        } ],
        "timeCritical" : false
      } ],
      "finallyBranch" : null,
      "timeCritical" : false
    } ],
    "syncronized" : false,
    "timeCritical" : false
  } ],
  "staticInit" : [ ],
  "name" : "JavaTimerExampleTask",
  "accessRight" : "PUBLIC",
  "implmentsInterfaces" : [ ],
  "extendClass" : "TimerTask",
  "imports" : [ {
    "start" : 26,
    "end" : 48,
    "startToken" : null,
    "endToken" : null,
    "code" : "import java.util.Date;",
    "line" : 3,
    "packagename" : "java.util.Date",
    "static" : false,
    "timeCritical" : false
  }, {
    "start" : 49,
    "end" : 72,
    "startToken" : null,
    "endToken" : null,
    "code" : "import java.util.Timer;",
    "line" : 4,
    "packagename" : "java.util.Timer",
    "static" : false,
    "timeCritical" : false
  }, {
    "start" : 73,
    "end" : 100,
    "startToken" : null,
    "endToken" : null,
    "code" : "import java.util.TimerTask;",
    "line" : 5,
    "packagename" : "java.util.TimerTask",
    "static" : false,
    "timeCritical" : false
  } ],
  "attributes" : [ ],
  "timeCritical" : false
}